using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Plugins;
using System;
using System.Threading.Tasks;
using System.Linq;
using System.Collections.Generic;

namespace AnimatedArmouryRebalancer
{
    public class Program
    {
        private static Lazy<Settings> _settings = null!;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetTypicalOpen(GameRelease.SkyrimSE, "AnimatedArmouryRebalancer.esp")
                .SetAutogeneratedSettings("settings", "settings.json", out _settings)
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            Console.WriteLine("AnimatedArmouryRebalancer v1.0.0");
            Console.WriteLine($"Beginning patching process...");
            
            // Get all weapons from the included plugins
            var allWeapons = new List<IWeaponGetter>();
            
            foreach (var pluginName in _settings.Value.IncludedPlugins)
            {
                // Check if the plugin is in the load order
                var pluginMod = state.LoadOrder.PriorityOrder
                    .FirstOrDefault(mod => mod.ModKey.FileName.String.Equals(pluginName, StringComparison.OrdinalIgnoreCase));
                
                if (pluginMod != null)
                {
                    Console.WriteLine($"{pluginName} found in load order.");
                    
                    // Check if the mod has weapons
                    if (pluginMod.Mod?.Weapons != null)
                    {
                        allWeapons.AddRange(pluginMod.Mod.Weapons);
                    }
                }
                else
                {
                    Console.WriteLine($"WARNING: {pluginName} not found in load order. Skipping.");
                }
            }
            
            Console.WriteLine($"Found {allWeapons.Count} weapons in the included plugins");
            
            // Print all weapons with their names
            int count = 0;
            foreach (var weapon in allWeapons)
            {
                string weaponName = weapon.Name?.String ?? "Unnamed Weapon";
                string editorID = weapon.EditorID ?? "No EditorID";
                
                Console.WriteLine($"\nWeapon {++count}: {weaponName} (EditorID: {editorID})");
                
                // Weapon properties we found:
                // - BasicStats.Damage: Base damage of the weapon
                // - Data.Speed: Attack speed of the weapon
                // - Data.Reach: Reach of the weapon
                // - Data.Stagger: Stagger value of the weapon
                // - Critical.Damage: Critical hit damage of the weapon
                
                // Get weapon stats
                int baseDamage = 0;
                float speed = 0;
                float reach = 0;
                float stagger = 0;
                float criticalDamage = 0;
                
                if (weapon.BasicStats != null)
                {
                    baseDamage = weapon.BasicStats.Damage;
                }
                
                if (weapon.Data != null)
                {
                    speed = weapon.Data.Speed;
                    reach = weapon.Data.Reach;
                    stagger = weapon.Data.Stagger;
                }
                
                if (weapon.Critical != null)
                {
                    criticalDamage = weapon.Critical.Damage;
                }
                
                // Print weapon keywords
                Console.WriteLine("  Keywords:");
                if (weapon.Keywords != null && weapon.Keywords.Count > 0)
                {
                    foreach (var keyword in weapon.Keywords)
                    {
                        try
                        {
                            var resolvedKeyword = state.LinkCache.Resolve(keyword);
                            Console.WriteLine($"    {resolvedKeyword.EditorID}");
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"    {keyword.FormKey} (Error resolving: {ex.Message})");
                        }
                    }
                }
                else
                {
                    Console.WriteLine("    No keywords found");
                }
                
                // Get weapon material using WeaponHelper
                string material = "steel"; // Default material
                try
                {
                    material = WeaponHelper.GetWeaponMaterial(weapon, state.LinkCache, _settings.Value.IncludeWACCF);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"  Error getting weapon material: {ex.Message}");
                    Console.WriteLine($"  WARNING: Skipping weapon due to material error");
                    continue; // Skip this weapon and move to the next one
                }
                
                // Get weapon type using WeaponHelper
                string? weaponType = null;
                try
                {
                    weaponType = WeaponHelper.GetWeaponTypeFromKeywords(weapon, state.LinkCache);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"  Error getting weapon type: {ex.Message}");
                    Console.WriteLine($"  WARNING: Skipping weapon due to type error");
                    continue; // Skip this weapon and move to the next one
                }
                
                // Skip weapons with unknown type
                if (weaponType == null)
                {
                    Console.WriteLine($"  WARNING: Unknown weapon type, skipping weapon");
                    continue; // Skip this weapon and move to the next one
                }
                
                // Get new weapon stats based on weapon type and material
                WeaponStats? newStats = null;
                try
                {
                    newStats = WeaponHelper.GetWeaponStats(weaponType, material, _settings.Value.IncludeWACCF);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"  Error getting new weapon stats: {ex.Message}");
                    Console.WriteLine($"  WARNING: Skipping weapon due to stats error");
                    continue; // Skip this weapon and move to the next one
                }
                
                // Skip weapons with no stats
                if (newStats == null)
                {
                    Console.WriteLine($"  WARNING: Could not calculate new stats, skipping weapon");
                    continue; // Skip this weapon and move to the next one
                }
                
                Console.WriteLine($"  Base Damage: {baseDamage}");
                Console.WriteLine($"  Speed: {speed}");
                Console.WriteLine($"  Reach: {reach}");
                Console.WriteLine($"  Stagger: {stagger}");
                Console.WriteLine($"  Critical Damage: {criticalDamage}");
                Console.WriteLine($"  Material: {material}");
                Console.WriteLine($"  Weapon Type: {weaponType ?? "Unknown"}");
                
                // Print new stats if available
                if (newStats != null)
                {
                    Console.WriteLine("  New Stats:");
                    Console.WriteLine($"    Base Damage: {newStats.BaseDamage}");
                    Console.WriteLine($"    Speed: {newStats.Speed}");
                    Console.WriteLine($"    Reach: {newStats.Reach}");
                    Console.WriteLine($"    Stagger: {newStats.Stagger}");
                    Console.WriteLine($"    Critical Damage: {newStats.CriticalDamage}");
                    
                    // Create a new weapon with the updated stats
                    var newWeapon = state.PatchMod.Weapons.GetOrAddAsOverride(weapon);
                    
                    // Update the weapon stats
                    if (newWeapon.BasicStats != null)
                    {
                        newWeapon.BasicStats.Damage = (ushort)newStats.BaseDamage;
                    }
                    
                    if (newWeapon.Data != null)
                    {
                        newWeapon.Data.Speed = newStats.Speed;
                        newWeapon.Data.Reach = newStats.Reach;
                        newWeapon.Data.Stagger = newStats.Stagger;
                    }
                    
                    if (newWeapon.Critical != null)
                    {
                        newWeapon.Critical.Damage = (ushort)newStats.CriticalDamage;
                    }
                    
                    Console.WriteLine("  Stats updated successfully");
                }
            }
            
            Console.WriteLine($"\nPrinted all {allWeapons.Count} weapons from the included plugins");
            
            // End of patching process
            Console.WriteLine("Patching process completed.");
        }
    }
} 